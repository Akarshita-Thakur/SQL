CREATE DATABASE OnlineBookstore;

use onlineBookstore;

-- Create Tables

CREATE TABLE Books (
    Book_ID SERIAL PRIMARY KEY,
    Title VARCHAR(100),
    Author VARCHAR(100),
    Genre VARCHAR(50),
    Published_Year INT,
    Price NUMERIC(10, 2),
    Stock INT
);

CREATE TABLE Customers (
    Customer_ID SERIAL PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    City VARCHAR(50),
    Country VARCHAR(150)
);

CREATE TABLE Orders (
    Order_ID SERIAL PRIMARY KEY,
    Customer_ID INT REFERENCES Customers(Customer_ID),
    Book_ID INT REFERENCES Books(Book_ID),
    Order_Date DATE,
    Quantity INT,
    Total_Amount NUMERIC(10, 2)
);

SELECT * FROM Books;
SELECT * FROM Customers;
SELECT * FROM Orders;

-- 1) RETRIEVE ALL BOOKS IN THE "FICTION" GENRE --
SELECT * FROM BOOKS
WHERE GENRE ="FICTION";

-- 2) FIND BOOKS PUBLISHED AFTER THE YEAR 1950 --
SELECT * FROM BOOKS
WHERE PUBLISHED_YEAR >1950;

-- 3) LIST ALL CUSTOMERS FROM CANADA --
SELECT * FROM CUSTOMERS
WHERE COUNTRY="CANADA";

-- 4) SHOW ORDERS PLACED IN NOVEMBER 2023 --
SELECT * FROM ORDERS
WHERE ORDER_DATE BETWEEN '2023-11-01' AND '2023-11-30';

-- 5) RETRIEVE THE TOTAL STOCK OF BOOKS AVAILABLE --
SELECT SUM(STOCK) AS TOTAL_STOCKS
 FROM BOOKS;
 
 -- 6) FIND THE DETAILS OF THE MOST EXPENSIVE BOOK --
SELECT * FROM BOOKS ORDER BY PRICE DESC LIMIT 1;
 
 -- 7) SHOW ALL CUSTOMERS WHO ORDERD MORE THAN 1 QUANTITY OF A BOOK --
SELECT * FROM ORDERS
WHERE QUANTITY>1;

-- 8) RETRIEVE ALL ORDERS WHERE THE TOTAL AMOUNT EXCEEDS $20 --
SELECT * FROM ORDERS
WHERE TOTAL_AMOUNT >20;

-- 9) LIST ALL THE GENRE AVAILABLE IN THE BOOKS TABLE --
SELECT DISTINCT GENRE FROM BOOKS;

-- 10) FIND THE BOOK WITH THE LOWEST STOCK --
SELECT * FROM BOOKS ORDER BY STOCK LIMIT 1;
 
 -- 11) CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS --
 SELECT SUM(TOTAL_AMOUNT) AS TOTAL_REVENUE FROM ORDERS;
 
 
 -- ADVANCE QUERIES --
 
 
-- 1) RETRIEVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE --
SELECT B.GENRE,SUM(O.QUANTITY) AS TOTAL_BOOK_SOLD
FROM ORDERS o
JOIN BOOKS B ON B.BOOK_ID=O.BOOK_ID
GROUP BY B.GENRE;

-- 2) FIND THE AVERAGE PRICE OF BOOKS IN "FANTASY" GENRE --
SELECT AVG(PRICE)FROM BOOKS
WHERE GENRE="FANTASY";

-- 3) LIST CUSTOMERS WHO HAVE PLACED AT LEAST 2 ORDERS --
SELECT O.CUSTOMER_ID,C.NAME,COUNT(O.ORDER_ID) AS ORDER_COUNT
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY O.CUSTOMER_ID,C.NAME
HAVING COUNT(ORDER_ID)>=2;

-- 4) FIND THE MOST FREQUENTLY ORDERD BOOK --

SELECT O.BOOK_ID,B.TITLE,COUNT(O.ORDER_ID)AS ORDER_COUNT
FROM ORDERS O
JOIN BOOKS B ON B.BOOK_ID=O.BOOK_ID
GROUP BY O.BOOK_ID,B.TITLE
ORDER BY ORDER_COUNT DESC LIMIT 1;

-- 5) SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF 'FANTASY' GENRE --
SELECT TITLE,PRICE FROM BOOKS
WHERE GENRE='FANTASY'
GROUP BY TITLE,PRICE
ORDER BY PRICE DESC LIMIT 3;


SELECT * FROM BOOKS
WHERE GENRE='FANTASY'
ORDER BY PRICE DESC LIMIT 3;

-- 6) RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR --
SELECT B.AUTHOR,SUM(O.QUANTITY) AS TOTAL_BOOKS_SOLD
FROM ORDERS O
JOIN BOOKS B ON O.BOOK_ID=B.BOOK_ID
GROUP BY B.AUTHOR;

-- 7) LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED --
SELECT DISTINCT C.CITY,TOTAL_AMOUNT
FROM ORDERS O
JOIN CUSTOMERS C ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.TOTAL_AMOUNT>30; 

-- 8) FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS --
SELECT C.CUSTOMER_ID,C.NAME,SUM(O.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM ORDERS O
JOIN CUSTOMERS C ON C.CUSTOMER_ID=O.CUSTOMER_ID
GROUP BY C.NAME,C.CUSTOMER_ID
order by TOTAL_SPENT DESC LIMIT 1;

-- 9) CALCULATE THE STOCK REMAINING AFTER FULFILLING ALL ORDERS --
SELECT B.BOOK_ID,B.TITLE,B.STOCK,coalesce(SUM(O.QUANTITY),0) AS TOTAL_QUANTITY,
B.STOCK-coalesce(SUM(O.QUANTITY),0) AS REMAINING_STOCK
FROM BOOKS B
LEFT JOIN ORDERS O ON B.BOOK_ID=O.BOOK_ID
GROUP BY B.BOOK_ID;

 
 
 
 
 
 
 